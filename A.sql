drop table booking_ticket;
drop table payment_information;
drop table passenger;
drop table flight;
drop table company;

CREATE TABLE company(
    C_ID INTEGER NOT NULL,
    C_NAME VARCHAR2(30),
    C_CONTACT NUMBER(11),
    C_ADDRESS VARCHAR2(30),
    PRIMARY KEY (C_ID)
);

CREATE TABLE flight(
    F_ID INTEGER NOT NULL,
    C_ID INTEGER NOT NULL,
    JWHERE VARCHAR2(30),
    JFROM VARCHAR2(30),
    JDATE DATE,
    PRIMARY KEY (F_ID),
    FOREIGN KEY(C_ID) REFERENCES company on DELETE CASCADE
);

CREATE TABLE passenger(   
    P_ID INTEGER NOT NULL,
    NID VARCHAR2(30),
    FNAME VARCHAR2(30),
    LNAME VARCHAR2(30),
    GENDER VARCHAR2(15),
    DOB VARCHAR2(10),
    PHONE NUMBER(11),
    EMAIL VARCHAR2(30),
    PRIMARY KEY (P_ID)
);

CREATE TABLE payment_information(
    PAY_ID INTEGER NOT NULL,
    CARD_NUM VARCHAR2(30),
    CREDIT_CARD_HOLDER VARCHAR2(20),
    X_DATE VARCHAR2(10),
    CVV INTEGER,
    PRIMARY KEY (PAY_ID) 
);

CREATE TABLE booking_ticket(
    T_ID INTEGER NOT NULL,
    F_ID INTEGER NOT NULL, 
    P_ID INTEGER NOT NULL,
    PAY_ID INTEGER NOT NULL,
    PRIMARY KEY (T_ID),
    FOREIGN KEY (F_ID) REFERENCES flight ON DELETE CASCADE,
    FOREIGN KEY (P_ID) REFERENCES passenger ON DELETE CASCADE,
    FOREIGN KEY (PAY_ID) REFERENCES payment_information ON DELETE CASCADE
);

INSERT INTO company VALUES (1,'Overnight Skies', 0175426401,'JAPAN');
INSERT INTO company VALUES (2,'Oneworld Airlines', 01754264202, 'JAPAN');
INSERT INTO company VALUES (3,'Blue Line Club', 01754264203, 'JAPAN');
INSERT INTO company VALUES (4,'Aeroflow America', 01754264204, 'INDIA');
INSERT INTO company VALUES (5,'Budget Airways', 01754264205, 'JAPAN');
INSERT INTO company VALUES (6,'Go Flyin Group', 01754264206, 'INDIA');
INSERT INTO company VALUES (7,'Keloha Air', 01754264207, 'INDIA');
INSERT INTO company VALUES (8,'Adrenaline Airways', 01754264208, 'INDIA');
INSERT INTO company VALUES (9,'Blue Sky flight', 01754264209, 'JAPAN');
INSERT INTO company VALUES (10,'Aero Kingfisher', 01754264210, 'JAPAN');

INSERT INTO flight VALUES (1, 1, 'BANGLADESH', 'INDIA','11-JAN-2022');
INSERT INTO flight VALUES (2, 1, 'INDIA', 'DUBAI','12-JAN-2022');
INSERT INTO flight VALUES (3, 1, 'DUBAI', 'ITALY','13-JAN-2022');
INSERT INTO flight VALUES (4, 2, 'ITALY', 'DUBAI','14-JAN-2022');
INSERT INTO flight VALUES (5, 2, 'DUBAI', 'INDIA','15-JAN-2022');
INSERT INTO flight VALUES (6, 2, 'INDIA', 'BANGLADESH','16-JAN-2022');
INSERT INTO flight VALUES (7, 3, 'INDIA', 'PAKISTAN','17-JAN-2022');
INSERT INTO flight VALUES (8, 3, 'BANGLADESH', 'USA','18-JAN-2022');
INSERT INTO flight VALUES (9, 3, 'BANGLADESH', 'UK','19-JAN-2022');
INSERT INTO flight VALUES (10, 9, 'BANGLADESH', 'GERMANY','20-JAN-2022');
INSERT INTO flight VALUES (11, 9, 'JAPAN', 'BANGLADESH','21-JAN-2022');
INSERT INTO flight VALUES (12, 9, 'FINLAND', 'PAKISTAN','22-JAN-2022');
INSERT INTO flight VALUES (13, 9, 'COLOMBIA', 'USA','23-JAN-2022');
INSERT INTO flight VALUES (14, 10, 'AGENTINA', 'UK','24-JAN-2022');
INSERT INTO flight VALUES (15, 10, 'BRAZIL', 'GERMANY','25-JAN-2022');

INSERT INTO passenger VALUES (1, '2000300040005001', 'SIMON', 'TUDU', 'MALE', '2000-09-19', 00754264201, 'tudu1807121@stud.kuet.ac.bd');
INSERT INTO passenger VALUES (2, '2000300040005002', 'SUBOL', 'MURMU', 'MALE', '2000-10-19', 00754264202, 'tudu1807122@stud.kuet.ac.bd');
INSERT INTO passenger VALUES (3, '2000300040005003', 'BIKASH', 'TUDU', 'MALE', '2001-09-19', 00754264203, 'tudu1807123@stud.kuet.ac.bd');
INSERT INTO passenger VALUES (4, '2000300040005004', 'JONATHAN', 'TUDU', 'MALE', '1984-09-19', 00754264204, 'tudu1807124@stud.kuet.ac.bd');
INSERT INTO passenger VALUES (5, '2000300040005005', 'PAULUS', 'TUDU', 'MALE', '1958-09-19', 00754264205, 'tudu1807125@stud.kuet.ac.bd');
INSERT INTO passenger VALUES (6, '2000300040005006', 'SUNNY', 'TUDU', 'MALE', '1993-09-19', 00754264206, 'tudu1807126@stud.kuet.ac.bd');
INSERT INTO passenger VALUES (7, '2000300040005007', 'THEOPHIL', 'TUDU', 'MALE', '1994-09-19', 00754264207, 'tudu1807127@stud.kuet.ac.bd');
INSERT INTO passenger VALUES (8, '2000300040005008', 'LITON', 'TUDU', 'MALE', '1992-09-19', 00754264208, 'tudu1807128@stud.kuet.ac.bd');
INSERT INTO passenger VALUES (9, '2000300040005009', 'DILAN', 'MARDY', 'MALE', '2011-09-19', 00754264209, 'tudu1807129@stud.kuet.ac.bd');
INSERT INTO passenger VALUES (10, '2000300040005010', 'ARPON', 'MURMU', 'MALE', '2006-09-19', 00754264210, 'tudu1807130@stud.kuet.ac.bd');

INSERT INTO payment_information VALUES (1, '2XXX 3XXX 4XXX 1XXX', 'SIMON', '2025-12-12', '301');
INSERT INTO payment_information VALUES (2, '2XXX 3XXX 4XXX 2XXX', 'SUNNY', '2026-12-12', '302');
INSERT INTO payment_information VALUES (3, '2XXX 3XXX 4XXX 3XXX', 'MANUEL', '2027-12-12', '303');
INSERT INTO payment_information VALUES (4, '2XXX 3XXX 4XXX 4XXX', 'LITON', '2028-12-12', '304');
INSERT INTO payment_information VALUES (5, '2XXX 3XXX 4XXX 5XXX', 'JONATHAN', '2029-12-12', '305');
INSERT INTO payment_information VALUES (6, '2XXX 3XXX 4XXX 6XXX', 'BIKASH', '2030-12-12', '306');
INSERT INTO payment_information VALUES (7, '2XXX 3XXX 4XXX 7XXX', 'ARPON', '2031-12-12', '307');
INSERT INTO payment_information VALUES (8, '2XXX 3XXX 4XXX 8XXX', 'DILAN', '2032-12-12', '308');
INSERT INTO payment_information VALUES (9, '2XXX 3XXX 4XXX 9XXX', 'JENIFER', '2033-12-12', '309');
INSERT INTO payment_information VALUES (10, '2XXX 3XXX 4XXX 10XX', 'ARICA', '2034-12-12', '310');

INSERT INTO booking_ticket VALUES (1, 1, 1, 1);
INSERT INTO booking_ticket VALUES (2, 2, 2, 2);
INSERT INTO booking_ticket VALUES (3, 3, 3, 3);
INSERT INTO booking_ticket VALUES (4, 4, 4, 4);
INSERT INTO booking_ticket VALUES (5, 5, 5, 5);
INSERT INTO booking_ticket VALUES (6, 6, 6, 6);
INSERT INTO booking_ticket VALUES (7, 7, 7, 7);
INSERT INTO booking_ticket VALUES (8, 8, 8, 8);
INSERT INTO booking_ticket VALUES (9, 9, 9, 9);
INSERT INTO booking_ticket VALUES (10, 10, 10, 10);
INSERT INTO booking_ticket VALUES (11, 1, 1, 1);
INSERT INTO booking_ticket VALUES (12, 2, 2, 2);
INSERT INTO booking_ticket VALUES (13, 3, 3, 3);
INSERT INTO booking_ticket VALUES (14, 4, 3, 4);
INSERT INTO booking_ticket VALUES (15, 5, 3, 5);
INSERT INTO booking_ticket VALUES (16, 6, 4, 6);
INSERT INTO booking_ticket VALUES (17, 7, 4, 7);
INSERT INTO booking_ticket VALUES (18, 8, 9, 8);
INSERT INTO booking_ticket VALUES (19, 9, 9, 9);
INSERT INTO booking_ticket VALUES (20, 10, 9, 10);





--DESCRIPTION OF ALL 5 TABLES

DESC booking_ticket;
DESC payment_information;
DESC passenger;
DESC flight;
DESC company;



-- SHOWS INSERTED DATA

SELECT * FROM booking_ticket;
SELECT * FROM payment_information;
SELECT * FROM passenger;
SELECT * FROM flight;
SELECT * FROM company;



-- ADDING NEW COLUMN IN booking_ticket TABLE

ALTER TABLE booking_ticket ADD NEW_COLUMN VARCHAR(10);
DESC booking_ticket;



-- DROPING COLUMN FROM booking_ticket TABLE

ALTER TABLE booking_ticket DROP COLUMN NEW_COLUMN;
DESC booking_ticket;


-- MODIFYING "C_NAME" COLUMN DATA TYPE IN company TABLE

ALTER TABLE company MODIFY C_NAME VARCHAR(40);
DESC company;



-- UPDATING A VALUE IN "C_NAME" COLUMN OF company TABLE

UPDATE company SET C_NAME = 'Bangladesh Airlines' WHERE C_ID = 3;
SELECT * FROM company;

UPDATE company SET C_NAME = 'Blue Line Club' WHERE C_ID = 3;
SELECT * FROM company;


-- DELETING A ROW FROM company TABLE

DELETE FROM company WHERE C_ID = 10;
SELECT * FROM company;

INSERT INTO company(C_ID, C_NAME, C_CONTACT, C_ADDRESS) VALUES (10,'Aero Kingfisher', 01754264210, 'JAPAN');
SELECT * FROM company;



-- CALCULATED FIELD & GIVING THE COLUMN AN ALIAS
SELECT (C_ID + 10) AS C_ID_PLUS_TEN FROM company; 



-- APPLYING CONDITIONS BY "WHERE" CLAUSE
SELECT C_NAME, C_ADDRESS FROM company WHERE C_ID = 9;


-- RANGE SEARCH USING "BETWEEN ... AND" & "NOT BETWEEN ... AND"
SELECT C_ID, C_NAME, C_ADDRESS FROM company WHERE C_ID BETWEEN 3 AND 9;
SELECT C_ID, C_NAME, C_ADDRESS FROM company WHERE C_ID NOT BETWEEN 3 AND 9;


--SEARCH BY MULTIPLE CONDITIONS ( AND & OR)
SELECT C_ID, C_NAME, C_CONTACT FROM company WHERE C_ID <=5 AND C_ADDRESS = 'INDIA';
SELECT C_ID, C_NAME, C_CONTACT FROM company WHERE C_ID <=5 OR C_ADDRESS = 'JAPAN';

-- SET MEMBERSHIP
SELECT C_ID, C_NAME, C_CONTACT FROM company WHERE C_ID IN (3,6,9);
SELECT C_ID, C_NAME, C_CONTACT FROM company WHERE C_ID NOT IN (3,6,9);


-- ORDERING BY SINGLE COLUMN
SELECT C_ID, C_NAME, C_CONTACT FROM company ORDER BY C_ID;
SELECT C_ID, C_NAME, C_CONTACT FROM company ORDER BY C_ID desc;


-- ORDERING BY MULTIPLE COLUMNS
INSERT INTO company(C_ID, C_NAME, C_CONTACT) VALUES (11, 'KINGFISHER',  01754264211);
INSERT INTO company(C_ID, C_NAME, C_CONTACT) VALUES (12, 'INDIAN AIRLINES',  01754264212);

SELECT C_ID, C_NAME, C_CONTACT FROM company ORDER BY C_NAME, C_CONTACT;
SELECT C_ID, C_NAME, C_CONTACT FROM company ORDER BY C_NAME, C_CONTACT desc;
SELECT C_ID, C_NAME, C_CONTACT FROM company ORDER BY C_NAME desc, C_CONTACT desc;

DELETE FROM company WHERE C_ID > 10;
SELECT * FROM company;



-- Use of "distinct" keyword 
SELECT DISTINCT (C_ADDRESS) FROM company;

-- PATTERN MATCHING

SELECT C_ID, C_ADDRESS FROM company WHERE C_ADDRESS LIKE '%P%';
SELECT C_ID, C_ADDRESS FROM company WHERE C_ADDRESS LIKE '_N%';
SELECT C_ID, C_ADDRESS FROM company WHERE C_ADDRESS LIKE '%N';

-- AGGREGATE FUNCTIONS:

SELECT MAX(C_CONTACT) FROM company;
SELECT MIN(C_CONTACT) FROM company;
SELECT SUM(C_CONTACT) FROM company;
SELECT COUNT(C_CONTACT) FROM company;
SELECT COUNT(*) FROM company;
SELECT COUNT(DISTINCT (C_CONTACT)) FROM company;
SELECT AVG(C_CONTACT) FROM company;
SELECT AVG(NVL(C_CONTACT, 0)) FROM company; 

-- GROUP BY CLAUSE
SELECT P_ID, COUNT(*) FROM booking_ticket GROUP BY P_ID;
SELECT P_ID, COUNT(*) FROM booking_ticket WHERE P_ID>5 GROUP BY P_ID;



-- HAVING CLAUSE
INSERT INTO booking_ticket ( T_ID, F_ID, P_ID, Pay_ID) VALUES (21, 1, 9, '3');
INSERT INTO booking_ticket ( T_ID, F_ID, P_ID, Pay_ID) VALUES (22, 1, 10, '4');

SELECT P_ID, COUNT(*) FROM booking_ticket GROUP BY P_ID HAVING P_ID>5;
SELECT P_ID, COUNT(*) FROM booking_ticket GROUP BY P_ID HAVING COUNT(*)>1;

DELETE FROM booking_ticket WHERE T_ID > 21;
SELECT * FROM booking_ticket;



-- NESTED QUERY
SELECT C_ID, C_NAME, C_CONTACT FROM company WHERE C_CONTACT IN ( SELECT C_CONTACT FROM company WHERE MOD(C_CONTACT, 2)= 0);





-- SET OPERATIONS :

-- UNION ALL
SELECT C_ID FROM company WHERE C_ID <5
UNION ALL
SELECT C_ID FROM flight;

-- UNION
SELECT C_ID FROM company WHERE C_ID <5
UNION
SELECT C_ID FROM flight;


--INTERSECTION
SELECT C_ID FROM company WHERE C_ID <5
INTERSECT
SELECT C_ID FROM flight;


-- MINUS
SELECT C_ID FROM flight
MINUS
SELECT C_ID FROM company WHERE C_ID <5;






JOIN OPERATIONS :


-- JOIN
SELECT C.C_ID, C.C_NAME, F.F_ID, F.JDATE FROM company C JOIN
flight F ON C.C_ID = F.C_ID;


-- NATURAL JOIN
SELECT C_ID, C_NAME, F_ID, JDATE FROM company NATURAL JOIN flight;


-- CROSS JOIN
SELECT D.C_ID, D.C_NAME, P.F_ID, P.JDATE FROM company D CROSS JOIN flight P;


-- INNER JOIN
SELECT C.C_ID, C.C_NAME, F.F_ID, F.JDATE FROM company C INNER JOIN
flight F ON C.C_ID = F.C_ID;


-- LEFT OUTER JOIN
SELECT C.C_ID, C.C_NAME, F.F_ID, F.JDATE FROM company C LEFT OUTER JOIN
flight F ON C.C_ID = F.C_ID;


--RIGHT OUTER JOIN
SELECT C.C_ID, C.C_NAME, F.F_ID, F.JDATE FROM company C RIGHT OUTER JOIN
flight F ON C.C_ID = F.C_ID;


--FULL OUTER JOIN
SELECT C.C_ID, C.C_NAME, F.F_ID, F.JDATE FROM company C FULL OUTER JOIN
flight F ON C.C_ID = F.C_ID;



-- SELF JOIN
SELECT A.C_ID FROM company A MINUS
SELECT A.C_ID FROM company A JOIN company B ON A.C_ID < B.C_ID;




-- PL/SQL PROCEDURE FOR DISPLAYING A SINGLE ROW

SET SERVEROUTPUT ON

DECLARE
PL_company_ID company.C_ID%TYPE;
PL_C_NAME company.C_NAME%TYPE;
PL_C_CONTACT company.C_CONTACT%TYPE;

BEGIN

SELECT C_ID, C_NAME, C_CONTACT INTO PL_company_ID, PL_C_NAME, PL_C_CONTACT FROM company
WHERE C_ID = 3;

DBMS_OUTPUT.PUT_LINE('C_ID : ' || PL_company_ID || ', company_NAME : ' || PL_C_NAME || ', company_C_CONTACT : '|| PL_C_CONTACT);

END;
/








-- PL/SQL PROCEDURE FOR DISPLAYING MULTIPLE ROWS USING CURSOR

SET SERVEROUTPUT ON

DECLARE
CURSOR DISCUR IS SELECT C_ID, C_NAME, C_CONTACT FROM company;
company_RECORD DISCUR%ROWTYPE;

BEGIN

OPEN DISCUR;
LOOP
	FETCH DISCUR INTO company_RECORD;
	EXIT WHEN DISCUR%ROWCOUNT > 6;
	DBMS_OUTPUT.PUT_LINE('C_ID : ' || company_RECORD.C_ID);
	DBMS_OUTPUT.PUT_LINE('COMPANY_NAME : ' || company_RECORD.C_NAME);
	DBMS_OUTPUT.PUT_LINE('COMPANY_CONTACT : ' || company_RECORD.C_CONTACT);
END LOOP;
CLOSE DISCUR;

END;
/





-- PL/SQL PROCEDURE WHICH TAKES USER INPUT & MAKE DECISION ABOUT PRODUCT STATUS

SET SERVEROUTPUT ON
DECLARE
S_P_ID passenger.P_ID%TYPE := &P_ID;
S_FNAME passenger.FNAME%TYPE;
S_LNAME passenger.LNAME%TYPE;
S_GENDER passenger.GENDER%TYPE;

BEGIN

SELECT FNAME, LNAME, GENDER INTO S_FNAME, S_LNAME, S_GENDER FROM passenger
WHERE P_ID = S_P_ID;

DBMS_OUTPUT.PUT_LINE ('P_ID: ' || S_P_ID);
DBMS_OUTPUT.PUT_LINE ('FNAME: ' || S_FNAME);
DBMS_OUTPUT.PUT_LINE ('LNAME: ' || S_LNAME);

IF S_GENDER = 'MALE' THEN
	DBMS_OUTPUT.PUT_LINE ('GENDER: ' || 'MALE');
ELSIF S_GENDER = 'FEMALE' THEN
	DBMS_OUTPUT.PUT_LINE ('GENDER: ' || 'FEMALE');
ELSE
    DBMS_OUTPUT.PUT_LINE('GENDER: ' || 'OTHER');
END IF;

EXCEPTION
WHEN OTHERS THEN
	DBMS_OUTPUT.PUT_LINE (SQLERRM);
END;
/
-- -- SHOW ERRORS





-- FUNCTION TO GET THE MAXIMUM JWHERE OF ANY UNIT ORDER

CREATE OR REPLACE FUNCTION booking_ticket_MAX_T_ID RETURN NUMBER IS
MAX_T_ID booking_ticket.T_ID%type;
BEGIN
SELECT MAX(COUNT(P_ID)) INTO MAX_T_ID FROM booking_ticket GROUP BY P_ID;
RETURN MAX_T_ID;
END;
/


SET SERVEROUTPUT ON
BEGIN
	DBMS_OUTPUT.PUT_LINE('MAX QUANTITY: ' || booking_ticket_MAX_T_ID);
END;
/








-- TRIGGER TO CHECK THE VALIDITY OF PRICE OF A PRODUCT

CREATE OR REPLACE TRIGGER CHECK_PAYMENT BEFORE INSERT OR UPDATE ON payment_information
FOR EACH ROW

DECLARE
MIN_CVV INTEGER := 301;
MAX_CVV INTEGER := 320;

BEGIN

IF :NEW.CVV > MAX_CVV THEN
	RAISE_APPLICATION_ERROR(-300,'VERIFICATION CODE IS HIGHER TO VALIDATE');
ELSIF :NEW.CVV < MIN_CVV THEN
	RAISE_APPLICATION_ERROR(-900,'VERIFICATION CODE IS LOWER TO VALIDATE');
ELSE DBMS_OUTPUT.PUT_LINE('NEW ROW INSERTED SUCCESSFULLY IN payment_information TABLE');
END IF;

END;
/

INSERT INTO payment_information (PAY_ID, CARD_NUM, CREDIT_CARD_HOLDER, X_DATE, CVV) VALUES (11, '2XXX 3XXX 4XXX 11XX', 'AKASH', '2025-12-12', '300');
INSERT INTO payment_information (PAY_ID, CARD_NUM, CREDIT_CARD_HOLDER, X_DATE, CVV) VALUES (12, '2XXX 3XXX 4XXX 12XX', 'DHRUBO', '2025-12-12', '315');
INSERT INTO payment_information (PAY_ID, CARD_NUM, CREDIT_CARD_HOLDER, X_DATE, CVV) VALUES (13, '2XXX 3XXX 4XXX 13XX', 'MUNNA', '2025-12-12', '333');
SELECT * FROM payment_information;
DELETE FROM payment_information WHERE PAY_ID > 10;
SELECT * FROM payment_information;




-- TRANSACTION MANAGEMENT

DELETE FROM company;
SELECT * FROM company;

ROLLBACK;
SELECT * FROM company;
COMMIT;



SAVEPOINT X_1;
INSERT INTO company(C_ID, C_NAME, C_CONTACT, C_ADDRESS) VALUES (11,'Sky', 0175426411,'Spain');
SAVEPOINT X_2;
INSERT INTO company(C_ID, C_NAME, C_CONTACT, C_ADDRESS) VALUES (12,'Dream', 0175426412,'Canada');
SELECT * FROM company;

ROLLBACK TO X_2;
SELECT * FROM company;
ROLLBACK TO X_1;
SELECT * FROM company;





-- DATE 

SELECT SYSDATE FROM DUAL;
SELECT CURRENT_DATE FROM DUAL;
SELECT SYSTIMESTAMP FROM DUAL;


SELECT F_ID, C_ID, JDATE FROM flight WHERE F_ID = 3;
SELECT ADD_MONTHS (JDATE, 5) AS FOUR_MONTHS_EXTENSION FROM flight WHERE F_ID = 3;
SELECT ADD_MONTHS (JDATE, -5) AS FOUR_MONTHS_REDUCTION FROM flight WHERE F_ID = 3;


SELECT LEAST (TO_DATE('1-JAN-2022'), TO_DATE('1-DEC-2022')) FROM DUAL;
SELECT GREATEST (TO_DATE('1-JAN-2022'), TO_DATE('1-DEC-2022')) FROM DUAL;


SELECT LAST_DAY(JDATE) FROM flight WHERE F_ID <= 5;

SELECT JDATE, EXTRACT(DAY FROM JDATE) AS DAY FROM flight WHERE F_ID <= 5;
SELECT JDATE, EXTRACT(MONTH FROM JDATE) AS MONTH FROM flight WHERE F_ID <= 5;
SELECT JDATE, EXTRACT(YEAR FROM JDATE) AS YEAR FROM flight WHERE F_ID <= 5;



-- VIEW (CREATE, UPDATE, DELETE, DROP)

CREATE VIEW PASSENGER_VIEW AS
SELECT F_ID, C_ID, JWHERE FROM flight;

SELECT * FROM PASSENGER_VIEW ;

UPDATE PASSENGER_VIEW  SET JWHERE = 'CANADA' WHERE F_ID=1;
SELECT * FROM PASSENGER_VIEW ;

DELETE FROM PASSENGER_VIEW  WHERE F_ID = 1;
SELECT * FROM PASSENGER_VIEW ;
   
DROP VIEW PASSENGER_VIEW ;

